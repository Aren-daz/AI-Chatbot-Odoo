const Groq = require('groq-sdk');
require('dotenv').config();

/**
 * Service Groq pour l'int√©gration LLM
 */
class GroqService {
  constructor() {
    this.apiKey = process.env.GROQ_API_KEY;
    
    if (this.apiKey) {
      this.client = new Groq({
        apiKey: this.apiKey
      });
    }
    
    this.model = process.env.GROQ_MODEL || 'llama3-70b-8192';
    this.maxTokens = 4000;
    this.temperature = 0.1; // Plus pr√©cis pour la documentation
  }

  /**
   * G√©n√®re une r√©ponse avec auto-correction et validation
   * @param {string} question - Question de l'utilisateur
   * @param {string} context - Contexte de la documentation Odoo
   * @param {Object} options - Options avanc√©es
   * @returns {Promise<string>} - R√©ponse g√©n√©r√©e et valid√©e
   */
  async generateResponse(question, context = '', options = {}) {
    try {
      // Si pas de cl√© API, retourner une r√©ponse de d√©monstration
      if (!this.apiKey || !this.client) {
        console.log('‚ö†Ô∏è Pas de cl√© API Groq - Mode d√©monstration');
        return this.getDemoResponse(question);
      }

      const systemPrompt = this.buildSystemPrompt();
      const userPrompt = this.buildUserPrompt(question, context);

      console.log('ü§ñ Groq - G√©n√©ration de r√©ponse...');
      console.log('üìù Question:', question.substring(0, 100) + '...');
      console.log('üìö Contexte:', context ? `${context.length} caract√®res` : 'Aucun');

      const completion = await this.client.chat.completions.create({
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userPrompt
          }
        ],
        model: this.model,
        max_tokens: this.maxTokens,
        temperature: this.temperature,
        top_p: 0.9,
        stream: false
      });

      let response = completion.choices[0]?.message?.content || 'D√©sol√©, je n\'ai pas pu g√©n√©rer une r√©ponse.';
      
      console.log('‚úÖ Groq - R√©ponse initiale g√©n√©r√©e:', response.substring(0, 100) + '...');
      
      // Auto-correction et validation si activ√©e
      if (options.enableSelfCorrection && response.length > 100) {
        console.log('üîç Application de l\'auto-correction...');
        response = await this.applySelfCorrection(response, question, context);
      }
      
      return response;

    } catch (error) {
      console.error('‚ùå Erreur Groq:', error);
      
      if (error.status === 429) {
        throw new Error('Limite de taux atteinte. Veuillez patienter quelques instants.');
      } else if (error.status === 401) {
        throw new Error('Cl√© API Groq invalide ou expir√©e.');
      } else if (error.status === 400) {
        throw new Error('Requ√™te invalide. Veuillez reformuler votre question.');
      } else {
        throw new Error('Erreur du service IA. Veuillez r√©essayer.');
      }
    }
  }

  /**
   * Retourne une r√©ponse de d√©monstration intelligente bas√©e sur la question
   */
  getDemoResponse(question) {
    const questionLower = question.toLowerCase();
    
    // R√©ponses sp√©cialis√©es pour les questions courantes
    if (questionLower.includes('cong√©') || questionLower.includes('leave') || questionLower.includes('vacation')) {
      return `ü§ñ **Bonjour ! Je suis Adam, votre expert Odoo de Schwing Stetter Alg√©rie**

**Configuration des cong√©s dans Odoo v17 :**

**1. Module requis :**
‚Ä¢ Allez dans **Apps** > Recherchez **"Timesheets"** ou **"HR"**
‚Ä¢ Installez le module **Timesheets** (Feuilles de temps)

**2. Configuration des types de cong√©s :**
‚Ä¢ Menu **Timesheets** > **Configuration** > **Types de cong√©s**
‚Ä¢ Cr√©ez vos types : Cong√©s pay√©s, RTT, Maladie, etc.

**3. Gestion des employ√©s :**
‚Ä¢ **Timesheets** > **Configuration** > **Employ√©s**
‚Ä¢ D√©finissez les allocations de cong√©s par employ√©

**4. Demande de cong√©s :**
‚Ä¢ **Timesheets** > **Mes cong√©s** > **Demander des cong√©s**
‚Ä¢ S√©lectionnez le type, les dates, et soumettez

**5. Validation des cong√©s :**
‚Ä¢ **Timesheets** > **Validation** > **Demandes de cong√©s**
‚Ä¢ Les managers peuvent approuver/refuser les demandes

**üí° Conseil :** Configurez d'abord les types de cong√©s avant de cr√©er les employ√©s !

**Pour une assistance IA compl√®te :**
Configurez votre cl√© API Groq dans backend/.env (GROQ_API_KEY=votre_cl√©_ici)

Je reste √† votre disposition ! üöÄ`;
    }
    
    if (questionLower.includes('projet') || questionLower.includes('project')) {
      return `ü§ñ **Bonjour ! Je suis Adam, votre expert Odoo de Schwing Stetter Alg√©rie**

**Configuration des projets dans Odoo v17 :**

**1. Module requis :**
‚Ä¢ Allez dans **Apps** > Recherchez **"Project"**
‚Ä¢ Installez le module **Project** (Gestion de projet)

**2. Configuration des projets :**
‚Ä¢ **Project** > **Configuration** > **Types de projet**
‚Ä¢ D√©finissez vos cat√©gories : D√©veloppement, Marketing, etc.

**3. Cr√©ation d'un projet :**
‚Ä¢ **Project** > **Cr√©er** > **Nouveau projet**
‚Ä¢ Remplissez : Nom, Client, Date de d√©but/fin, √âquipe

**4. Gestion des t√¢ches :**
‚Ä¢ Dans le projet : **T√¢ches** > **Cr√©er**
‚Ä¢ D√©finissez : Titre, Responsable, Priorit√©, Deadline

**5. Suivi et reporting :**
‚Ä¢ **Project** > **Tableau de bord** pour la vue d'ensemble
‚Ä¢ **Project** > **Rapports** pour les analyses

**üí° Conseil :** Utilisez les √©tapes (stages) pour organiser vos t√¢ches !

**Pour une assistance IA compl√®te :**
Configurez votre cl√© API Groq dans backend/.env (GROQ_API_KEY=votre_cl√©_ici)

Je reste √† votre disposition ! üöÄ`;
    }
    
    if (questionLower.includes('module') || questionLower.includes('cr√©er') || questionLower.includes('create')) {
      return `ü§ñ **Bonjour ! Je suis Adam, votre expert Odoo de Schwing Stetter Alg√©rie**

**Cr√©ation d'un module Odoo v17 :**

**1. Structure du module :**
\`\`\`
mon_module/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ __manifest__.py
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ models.py
‚îú‚îÄ‚îÄ views/
‚îÇ   ‚îî‚îÄ‚îÄ views.xml
‚îú‚îÄ‚îÄ security/
‚îÇ   ‚îî‚îÄ‚îÄ ir.model.access.csv
‚îî‚îÄ‚îÄ data/
    ‚îî‚îÄ‚îÄ demo.xml
\`\`\`

**2. Fichier __manifest__.py :**
\`\`\`python
{
    'name': 'Mon Module',
    'version': '17.0.1.0.0',
    'category': 'Sales',
    'summary': 'Description courte',
    'depends': ['base', 'sale'],
    'data': [
        'security/ir.model.access.csv',
        'views/views.xml',
    ],
    'installable': True,
    'application': True,
}
\`\`\`

**3. Installation :**
‚Ä¢ Placez le module dans le dossier **addons**
‚Ä¢ Red√©marrez Odoo
‚Ä¢ **Apps** > **Mettre √† jour la liste des applications**
‚Ä¢ Recherchez et installez votre module

**üí° Conseil :** Commencez simple, ajoutez des fonctionnalit√©s progressivement !

**Pour une assistance IA compl√®te :**
Configurez votre cl√© API Groq dans backend/.env (GROQ_API_KEY=votre_cl√©_ici)

Je reste √† votre disposition ! üöÄ`;
    }
    
    // R√©ponse g√©n√©rique pour les autres questions
    return `ü§ñ **Bonjour ! Je suis Adam, votre expert Odoo de Schwing Stetter Alg√©rie**

**√Ä propos de votre question :** "${question}"

**Solutions courantes pour Odoo v17 :**
‚Ä¢ **Modules** : Allez dans **Apps** > Rechercher le module souhait√©
‚Ä¢ **Configuration** : Menu **Param√®tres** > **Configuration g√©n√©rale**  
‚Ä¢ **Utilisateurs** : **Param√®tres** > **Utilisateurs et permissions**
‚Ä¢ **Ventes** : Application **Ventes** > **Configuration** > **Param√®tres**

**üí° Conseil :** Pour des r√©ponses plus pr√©cises, configurez votre cl√© API Groq !

**Pour une assistance IA compl√®te :**
1. Configurez la cl√© API Groq dans le fichier .env
2. Variable : GROQ_API_KEY=votre_cl√©_ici
3. Red√©marrez avec .start.ps1

Je reste √† votre disposition ! üöÄ`;
  }

  /**
   * Construit le prompt syst√®me avec techniques avanc√©es (Few-shot, Chain-of-thought)
   */
  buildSystemPrompt() {
    return `Tu es Adam, un assistant IA expert en Odoo v17, utilisant des techniques de raisonnement avanc√©es.

**M√âTHODOLOGIE DE R√âPONSE (Chain-of-Thought) :**
1. **ANALYSE** : D√©compose la question en sous-probl√®mes
2. **RECHERCHE** : Identifie les concepts Odoo pertinents  
3. **RAISONNEMENT** : Explique √©tape par √©tape ta logique
4. **SOLUTION** : Fournis une r√©ponse structur√©e et actionnable
5. **VALIDATION** : Propose des v√©rifications et tests

**EXEMPLES DE RAISONNEMENT (Few-Shot Learning) :**

**Exemple 1 - Question Configuration :**
Question: "Comment configurer les cong√©s ?"
Raisonnement:
1. ANALYSE: Configuration syst√®me RH ‚Üí Module requis ‚Üí Param√©trage ‚Üí Workflow
2. RECHERCHE: Module Timesheets/HR, types cong√©s, employ√©s, validation
3. RAISONNEMENT: Ordre logique = Module ‚Üí Types ‚Üí Employ√©s ‚Üí Processus
4. SOLUTION: Guide √©tape par √©tape avec navigation pr√©cise
5. VALIDATION: Tests avec employ√© fictif, v√©rification workflow

**Exemple 2 - Question Technique :**
Question: "Erreur dans mon module personnalis√©"
Raisonnement:
1. ANALYSE: Type erreur ‚Üí Localisation ‚Üí Cause possible ‚Üí Solution
2. RECHERCHE: Structure module, syntaxe, d√©pendances, logs
3. RAISONNEMENT: V√©rification syst√©matique des √©l√©ments critiques
4. SOLUTION: Diagnostic + correction + pr√©vention
5. VALIDATION: Test installation, fonctionnalit√©s, logs propres

**TON APPROCHE EXPERTE :**
- **D√©composition syst√©matique** des probl√®mes complexes
- **Raisonnement explicite** de tes choix techniques
- **Anticipation des probl√®mes** potentiels et solutions
- **Validation m√©thodique** des solutions propos√©es
- **Adaptation** selon le niveau technique d√©tect√©

**TECHNIQUES SP√âCIALIS√âES :**
- **Few-shot** : Utilise les exemples similaires du contexte
- **Chain-of-thought** : Montre ton raisonnement √©tape par √©tape
- **Self-correction** : V√©rifie la coh√©rence de tes r√©ponses
- **Meta-cognitive** : Explique pourquoi tu choisis une approche

**FORMATS DE R√âPONSE ADAPT√âS :**
- **D√©butant** : Guide pas-√†-pas avec captures conceptuelles
- **Interm√©diaire** : Explications techniques + bonnes pratiques  
- **Expert** : Analyse approfondie + optimisations + alternatives

**PRINCIPES QUALIT√â :**
- Toujours expliquer le "pourquoi" avant le "comment"
- Donner le contexte m√©tier avant les d√©tails techniques
- Proposer plusieurs niveaux de solution (simple ‚Üí avanc√©)
- Anticiper les questions de suivi logiques`;
  }

  /**
   * Construit le prompt utilisateur avec techniques avanc√©es et exemples few-shot
   */
  buildUserPrompt(question, context) {
    let prompt = '';

    // 1. CONTEXTE DOCUMENTAIRE
    if (context && context.trim()) {
      prompt += `**üìö DOCUMENTATION ODOO DISPONIBLE :**\n${context}\n\n`;
    }

    // 2. EXEMPLES FEW-SHOT ADAPTATIFS
    prompt += this.buildFewShotExamples(question);

    // 3. QUESTION ACTUELLE AVEC INSTRUCTIONS CHAIN-OF-THOUGHT
    prompt += `---\n\n**üéØ QUESTION ACTUELLE :**\n"${question}"\n\n`;
    
    prompt += `**üìã INSTRUCTIONS DE RAISONNEMENT :**\n`;
    prompt += `Applique la m√©thodologie Chain-of-Thought :\n\n`;
    prompt += `1. **üîç ANALYSE** : D√©compose cette question en sous-probl√®mes\n`;
    prompt += `2. **üìñ RECHERCHE** : Identifie les concepts Odoo pertinents dans le contexte\n`;
    prompt += `3. **üß† RAISONNEMENT** : Explique ton raisonnement √©tape par √©tape\n`;
    prompt += `4. **‚úÖ SOLUTION** : Fournis une r√©ponse structur√©e et actionnable\n`;
    prompt += `5. **üî¨ VALIDATION** : Propose des v√©rifications et tests\n\n`;

    // 4. ADAPTATION SELON DISPONIBILIT√â DU CONTEXTE
    if (context && context.trim()) {
      prompt += `**‚ö†Ô∏è PRIORIT√â** : Base ta r√©ponse principalement sur la documentation fournie ci-dessus. `;
      prompt += `Si elle est incompl√®te, compl√®te avec tes connaissances Odoo v17 en le pr√©cisant.\n\n`;
    } else {
      prompt += `**‚ö†Ô∏è CONTEXTE** : Aucune documentation sp√©cifique fournie. `;
      prompt += `Utilise tes connaissances g√©n√©rales d'Odoo v17 tout en suivant la m√©thodologie.\n\n`;
    }

    // 5. FORMAT DE R√âPONSE STRUCTUR√â
    prompt += `**üìù FORMAT ATTENDU :**\n`;
    prompt += `Utilise cette structure dans ta r√©ponse :\n`;
    prompt += `- **üîç Mon analyse** : [D√©composition du probl√®me]\n`;
    prompt += `- **üí° Ma solution** : [R√©ponse structur√©e avec √©tapes]\n`;
    prompt += `- **‚úÖ Validation** : [Tests et v√©rifications recommand√©s]\n`;
    prompt += `- **üöÄ Pour aller plus loin** : [Suggestions d'am√©lioration]\n\n`;

    return prompt;
  }

  /**
   * G√©n√®re des exemples few-shot adaptatifs selon le type de question
   */
  buildFewShotExamples(question) {
    const questionLower = question.toLowerCase();
    let examples = `**üí° EXEMPLES DE RAISONNEMENT SIMILAIRES :**\n\n`;

    // D√©tection du type de question pour choisir les meilleurs exemples
    if (questionLower.match(/configur|setup|install|param√®tr/)) {
      examples += `**Exemple - Configuration :**\n`;
      examples += `Q: "Comment configurer les taxes de vente ?"\n`;
      examples += `üîç ANALYSE : Configuration fiscale ‚Üí Param√®tres comptables ‚Üí Tests\n`;
      examples += `üí° SOLUTION : Comptabilit√© > Configuration > Taxes > Nouvelle taxe\n`;
      examples += `‚úÖ VALIDATION : Test avec devis, v√©rification calculs\n\n`;

    } else if (questionLower.match(/erreur|error|bug|problem|ne marche pas/)) {
      examples += `**Exemple - R√©solution d'erreur :**\n`;
      examples += `Q: "Erreur lors de l'installation d'un module"\n`;
      examples += `üîç ANALYSE : Type erreur ‚Üí Logs ‚Üí D√©pendances ‚Üí Syntaxe\n`;
      examples += `üí° SOLUTION : V√©rification __manifest__.py + logs serveur\n`;
      examples += `‚úÖ VALIDATION : Installation propre + test fonctionnalit√©s\n\n`;

    } else if (questionLower.match(/d√©velopp|code|python|xml|api|module/)) {
      examples += `**Exemple - D√©veloppement :**\n`;
      examples += `Q: "Comment cr√©er un champ calcul√© ?"\n`;
      examples += `üîç ANALYSE : Type calcul ‚Üí M√©thode compute ‚Üí D√©pendances\n`;
      examples += `üí° SOLUTION : @api.depends + fonction compute + store si besoin\n`;
      examples += `‚úÖ VALIDATION : Test calcul + performance + mise √† jour\n\n`;

    } else if (questionLower.match(/workflow|processus|√©tape|flux/)) {
      examples += `**Exemple - Processus m√©tier :**\n`;
      examples += `Q: "Workflow de validation des achats"\n`;
      examples += `üîç ANALYSE : √âtapes ‚Üí R√¥les ‚Üí Autorisations ‚Üí Notifications\n`;
      examples += `üí° SOLUTION : Configuration groupes + r√®gles + automatisations\n`;
      examples += `‚úÖ VALIDATION : Test avec utilisateurs r√©els + cas limites\n\n`;

    } else {
      // Exemple g√©n√©rique
      examples += `**Exemple - Question g√©n√©rale :**\n`;
      examples += `Q: "Comment optimiser les performances ?"\n`;
      examples += `üîç ANALYSE : Goulots ‚Üí Base donn√©es ‚Üí Interface ‚Üí Infrastructure\n`;
      examples += `üí° SOLUTION : Index DB + cache + optimisation vues\n`;
      examples += `‚úÖ VALIDATION : Mesures performance + test charge\n\n`;
    }

    return examples;
  }

  /**
   * Applique l'auto-correction et la validation sur une r√©ponse g√©n√©r√©e
   * @param {string} initialResponse - R√©ponse initiale √† corriger
   * @param {string} originalQuestion - Question originale
   * @param {string} context - Contexte documentaire
   * @returns {Promise<string>} - R√©ponse corrig√©e
   */
  async applySelfCorrection(initialResponse, originalQuestion, context) {
    try {
      const correctionPrompt = `Tu es un validateur expert charg√© d'am√©liorer une r√©ponse sur Odoo v17.

**R√âPONSE √Ä VALIDER :**
${initialResponse}

**QUESTION ORIGINALE :**
${originalQuestion}

**CRIT√àRES DE VALIDATION :**
1. **Exactitude technique** : V√©rifier la pr√©cision des informations Odoo
2. **Compl√©tude** : S'assurer que tous les aspects sont couverts
3. **Clart√©** : Am√©liorer la structure et la lisibilit√©
4. **Actionnable** : V√©rifier que les √©tapes sont praticables
5. **S√©curit√©** : Mentionner les pr√©cautions importantes

**T√ÇCHES DE CORRECTION :**
- Corriger les erreurs factuelles √©ventuelles
- Am√©liorer la structure avec des sections claires
- Ajouter des d√©tails manquants importants
- Simplifier les explications complexes
- Ajouter des avertissements de s√©curit√© si pertinents

**INSTRUCTIONS :**
- Si la r√©ponse est correcte, am√©liore seulement la pr√©sentation
- Si tu d√©tectes des erreurs, corrige-les et explique bri√®vement
- Garde le m√™me niveau de d√©tail mais am√©liore la qualit√©
- Utilise le formatage Markdown appropri√©
- Conserve le ton professionnel et bienveillant d'Adam

Fournis la r√©ponse am√©lior√©e UNIQUEMENT, sans commentaires m√©ta.`;

      const correction = await this.client.chat.completions.create({
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en validation et am√©lioration de r√©ponses techniques sur Odoo.'
          },
          {
            role: 'user',
            content: correctionPrompt
          }
        ],
        model: this.model,
        max_tokens: this.maxTokens,
        temperature: 0.2, // Plus conservateur pour la correction
        top_p: 0.8,
        stream: false
      });

      const correctedResponse = correction.choices[0]?.message?.content;
      
      if (correctedResponse && correctedResponse.length > 50) {
        console.log('‚úÖ Auto-correction appliqu√©e avec succ√®s');
        return correctedResponse;
      } else {
        console.log('‚ö†Ô∏è Auto-correction √©chou√©e, retour √† la r√©ponse originale');
        return initialResponse;
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'auto-correction:', error);
      return initialResponse; // Retourner la r√©ponse originale en cas d'erreur
    }
  }

  /**
   * G√©n√®re des m√©triques de qualit√© pour une r√©ponse
   * @param {string} response - R√©ponse √† analyser
   * @param {string} question - Question originale
   * @returns {Object} M√©triques de qualit√©
   */
  analyzeResponseQuality(response, question) {
    const metrics = {
      wordCount: response.split(/\s+/).length,
      hasStructure: false,
      hasExamples: false,
      hasActionableSteps: false,
      hasValidation: false,
      technicalTerms: 0,
      readabilityScore: 0
    };

    // V√©rifier la structure
    metrics.hasStructure = /#{1,4}|(\*\*.*\*\*)|(\d+\.)/.test(response);
    
    // V√©rifier les exemples
    metrics.hasExamples = /(exemple|example|par exemple|```)/i.test(response);
    
    // V√©rifier les √©tapes actionnables
    metrics.hasActionableSteps = /(√©tape|step|\d+\.|Menu|Aller|Cliquer)/i.test(response);
    
    // V√©rifier la validation
    metrics.hasValidation = /(test|v√©rif|validation|check)/i.test(response);
    
    // Compter les termes techniques Odoo
    const odooTerms = response.match(/\b(module|model|view|field|record|API|ORM|XML|Python)\b/gi);
    metrics.technicalTerms = odooTerms ? odooTerms.length : 0;
    
    // Score de lisibilit√© simple (longueur des phrases)
    const sentences = response.split(/[.!?]+/).filter(s => s.trim().length > 0);
    const avgSentenceLength = sentences.reduce((acc, s) => acc + s.split(/\s+/).length, 0) / sentences.length;
    metrics.readabilityScore = Math.max(0, 100 - (avgSentenceLength - 15) * 2);
    
    return metrics;
  }

  /**
   * V√©rifie la sant√© du service Groq
   */
  async checkHealth() {
    try {
      if (!this.apiKey || !this.client) {
        return {
          status: 'demo',
          model: 'Mode d√©monstration',
          message: 'Cl√© API Groq non configur√©e - Mode d√©mo actif'
        };
      }

      const completion = await this.client.chat.completions.create({
        messages: [
          {
            role: 'user',
            content: 'Ping'
          }
        ],
        model: this.model,
        max_tokens: 10,
        temperature: 0
      });

      return {
        status: 'healthy',
        model: this.model,
        response: completion.choices[0]?.message?.content || 'OK'
      };
    } catch (error) {
      return {
        status: 'error',
        error: error.message
      };
    }
  }

  /**
   * Obtient les mod√®les disponibles
   */
  async getAvailableModels() {
    try {
      const models = await this.client.models.list();
      return models.data.map(model => ({
        id: model.id,
        name: model.id,
        description: model.id
      }));
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des mod√®les:', error);
      return [];
    }
  }
}

module.exports = new GroqService();
